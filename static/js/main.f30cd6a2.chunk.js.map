{"version":3,"sources":["types/Status.ts","utils/fetchClient.ts","components/TodoContext.tsx","api/todos.ts","components/TodoAllChecked.tsx","components/TodoItem.tsx","components/TodoList.tsx","constants/Filters.ts","components/TodoFilter.tsx","components/TodoClear.tsx","components/TodoFooter.tsx","components/ErrorMessage/ErrorMessage.tsx","App.tsx","index.tsx"],"names":["Status","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","TodoContext","React","createContext","todos","setTodos","_todos","status","All","setStatus","_status","errorMessage","closeErrorMessage","TodoProvider","children","useState","setErrorMessage","useEffect","userId","catch","value","Provider","TodoAllChecked","useContext","isChecked","length","every","todo","completed","type","id","className","data-cy","onClick","allCompleted","map","TodoItem","title","editTitle","setEditTitle","isEdit","setIsEdit","editNameRef","useRef","current","focus","saveTitle","trim","todoItem","filter","cn","onChange","checked","placeholder","ref","event","target","onKeyUp","key","onBlur","onDoubleClick","aria-label","TodoList","filteredTodos","setFilteredTodos","filters","name","link","Active","Completed","TodoFilter","isSelected","setIsSelected","href","selected","filterStatus","TodoClear","TodoFooter","ErrorMessage","message","onClose","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f30cd6a2.chunk.js","sourcesContent":["// eslint-disable-next-line no-shadow\nexport enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // DON'T change the delay it is required for tests\n  return wait(100)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useState } from 'react';\nimport { Todo } from '../types/Todo';\nimport { Status } from '../types/Status';\nimport { getTodos } from '../api/todos';\n\nconst USER_ID = 12048;\n\nexport const TodoContext = React.createContext({\n  todos: [] as Todo[],\n  /* eslint-disable-next-line */\n  setTodos: (_todos: Todo[]) => {},\n  status: Status.All,\n  /* eslint-disable-next-line */\n  setStatus: (_status: Status) => {},\n  errorMessage: null as string | null,\n  closeErrorMessage: () => {},\n});\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport const TodoProvider: React.FC<Props> = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [status, setStatus] = useState<Status>(Status.All);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n\n  const showError = (message: string) => {\n    setErrorMessage(message);\n    setTimeout(() => setErrorMessage(null), 3000);\n  };\n\n  const closeErrorMessage = () => setErrorMessage(null);\n\n  useEffect(() => {\n    getTodos(USER_ID)\n      .then(setTodos)\n      .catch(() => showError('Unable to load todos'));\n  }, []);\n\n  const value = {\n    todos,\n    setTodos,\n    status,\n    setStatus,\n    errorMessage,\n    closeErrorMessage,\n  };\n\n  return <TodoContext.Provider value={value}>{children}</TodoContext.Provider>;\n};\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\n// Add more methods here\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useContext } from 'react';\nimport { TodoContext } from './TodoContext';\nimport '../styles/todoapp.scss';\n\nexport const TodoAllChecked: React.FC = () => {\n  const { todos, setTodos } = useContext(TodoContext);\n\n  const isChecked = todos.length > 0 && todos.every((todo) => todo.completed);\n\n  const handleToggleAllChange = () => {\n    const allCompleted = todos.every((todo) => todo.completed);\n\n    setTodos(todos.map((todo) => ({ ...todo, completed: !allCompleted })));\n  };\n\n  return (\n    <>\n      {!!todos.length && (\n        <>\n          <button\n            type=\"button\"\n            id=\"toggle-all\"\n            className={`todoapp__toggle-all ${isChecked ? 'active' : ''}`}\n            data-cy=\"ToggleAllButton\"\n            onClick={handleToggleAllChange}\n          />\n        </>\n      )}\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/control-has-associated-label */\nimport cn from 'classnames';\nimport React, {\n  useContext, useState, useRef, useEffect,\n} from 'react';\nimport { Todo } from '../types/Todo';\nimport { TodoContext } from './TodoContext';\n\ntype Props = {\n  todo: Todo;\n};\n\nconst ENTER = 'Enter';\nconst ESC = 'Escape';\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const { todos, setTodos } = useContext(TodoContext);\n  const { id, title, completed } = todo;\n\n  const [editTitle, setEditTitle] = useState(title);\n  const [isEdit, setIsEdit] = useState(false);\n  const editNameRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (editNameRef.current) {\n      editNameRef.current.focus();\n    }\n  }, [isEdit]);\n\n  const handleToggleViewChange = () => {\n    setTodos(\n      todos.map((todoItem) => (todoItem.id === id\n        ? { ...todoItem, completed: !completed } : todoItem)),\n    );\n  };\n\n  const handleTodoTitleChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setEditTitle(event.target.value);\n  };\n\n  const saveTitle = (value: string) => {\n    if (value.trim()) {\n      setTodos(\n        todos.map((todoItem) => (todoItem.id === id\n          ? { ...todoItem, title: value.trim() } : todoItem)),\n      );\n\n      setEditTitle(value.trim());\n    } else {\n      setTodos(todos.filter((todoItem) => todoItem.id !== id));\n    }\n\n    setIsEdit(false);\n  };\n\n  const handleTodoTitleBlur = () => {\n    if (editNameRef.current) {\n      saveTitle(editNameRef.current.value);\n    }\n  };\n\n  const handleTodoTitleKeyUp = (event: React.KeyboardEvent) => {\n    if (event.key === ENTER) {\n      if (editNameRef.current) {\n        saveTitle(editNameRef.current.value);\n      }\n    }\n\n    if (event.key === ESC) {\n      setEditTitle(title);\n      setIsEdit(false);\n    }\n  };\n\n  const handleDeleteClick = () => {\n    setTodos(todos.filter((todoItem) => todoItem.id !== id));\n  };\n\n  return (\n    <div\n      className={cn('todo', {\n        completed: !isEdit && completed,\n      })}\n    >\n      <label className=\"todo__status-label\">\n        <input\n          data-cy=\"TodoStatus\"\n          type=\"checkbox\"\n          className=\"todo__status\"\n          onChange={handleToggleViewChange}\n          checked={completed}\n        />\n      </label>\n\n      {!isEdit ? (\n        <span\n          onDoubleClick={() => setIsEdit(true)}\n          className=\"todo__title\"\n          data-cy=\"TodoTitle\"\n        >\n          {title}\n        </span>\n      ) : (\n        <>\n          <form>\n            <input\n              type=\"text\"\n              data-cy=\"TodoTitleField\"\n              className=\"todo__title-field\"\n              placeholder=\"Empty todo will be deleted\"\n              ref={editNameRef}\n              onChange={handleTodoTitleChange}\n              onKeyUp={handleTodoTitleKeyUp}\n              onBlur={handleTodoTitleBlur}\n              value={editTitle}\n            />\n          </form>\n\n          <div data-cy=\"TodoLoader\" className=\"modal overlay\">\n            <div className=\"modal-background has-background-white-ter\" />\n            <div className=\"loader\" />\n          </div>\n        </>\n      )}\n\n      <button\n        type=\"button\"\n        className=\"todo__remove\"\n        data-cy=\"TodoDelete\"\n        aria-label=\"deleteTodo\"\n        onClick={handleDeleteClick}\n      >\n        ×\n      </button>\n\n      <div data-cy=\"TodoLoader\" className=\"modal overlay\">\n        <div className=\"modal-background has-background-white-ter\" />\n        <div className=\"loader\" />\n      </div>\n    </div>\n  );\n};\n","import React, { useContext, useState, useEffect } from 'react';\nimport { TodoItem } from './TodoItem';\nimport { Todo } from '../types/Todo';\nimport { TodoContext } from './TodoContext';\nimport '../styles/todo.scss';\n\nexport const TodoList: React.FC = () => {\n  const { todos, status } = useContext(TodoContext);\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>(todos);\n\n  useEffect(() => {\n    switch (status) {\n      case 'active':\n        setFilteredTodos(todos.filter((todo) => !todo.completed));\n        break;\n\n      case 'completed':\n        setFilteredTodos(todos.filter((todo) => todo.completed));\n        break;\n\n      default:\n        setFilteredTodos(todos);\n    }\n  }, [status, todos]);\n\n  return (\n    <>\n      {!!todos.length && (\n        <>\n          {filteredTodos.map((todo: Todo) => (\n            <TodoItem todo={todo} key={todo.id} />\n          ))}\n        </>\n      )}\n    </>\n  );\n};\n","import { Status } from '../types/Status';\n\nexport const filters = [\n  {\n    name: 'All',\n    link: Status.All,\n  },\n  {\n    name: 'Active',\n    link: Status.Active,\n  },\n  {\n    name: 'Completed',\n    link: Status.Completed,\n  },\n];\n","import cn from 'classnames';\n\nimport React, { useState, useContext } from 'react';\nimport { TodoContext } from './TodoContext';\nimport { Status } from '../types/Status';\nimport { filters } from '../constants/Filters';\n\nexport const TodoFilter: React.FC = () => {\n  const { status, setStatus } = useContext(TodoContext);\n  const [isSelected, setIsSelected] = useState<Status>(status);\n\n  const handleFilterClick = (filterStatus: Status) => {\n    setIsSelected(filterStatus);\n    setStatus(filterStatus);\n  };\n\n  return (\n    <nav className=\"filter\" data-cy=\"Filter\">\n      {filters.map((filter) => (\n        <a\n          key={+filter.link}\n          href={`#/${filter.link}`}\n          className={cn('filter__link', {\n            selected: isSelected === filter.link,\n          })}\n          onClick={() => handleFilterClick(filter.link)}\n        >\n          {filter.name}\n        </a>\n      ))}\n    </nav>\n  );\n};\n","import React, { useContext } from 'react';\nimport { TodoContext } from './TodoContext';\n\nexport const TodoClear: React.FC = () => {\n  const { todos, setTodos } = useContext(TodoContext);\n\n  const handleCompletedDeleteClick = () => {\n    setTodos(todos.filter((todo) => !todo.completed));\n  };\n\n  if (todos.filter((todo) => todo.completed).length > 0) {\n    return (\n      <button\n        type=\"button\"\n        className=\"todoapp__clear-completed\"\n        data-cy=\"ClearCompletedButton\"\n        onClick={handleCompletedDeleteClick}\n      >\n        Clear completed\n      </button>\n    );\n  }\n\n  return null;\n};\n","import React, { useContext } from 'react';\nimport { TodoContext } from './TodoContext';\nimport { TodoFilter } from './TodoFilter';\nimport { TodoClear } from './TodoClear';\n\nexport const TodoFooter: React.FC = () => {\n  const { todos } = useContext(TodoContext);\n\n  return (\n    <>\n      {!!todos.length && (\n        <footer className=\"todoapp__footer\" data-cy=\"Footer\">\n          <span className=\"todo-count\" data-cy=\"TodosCounter\">\n            {`${todos.filter((todo) => !todo.completed).length} items left`}\n          </span>\n          <TodoFilter />\n          <TodoClear />\n        </footer>\n      )}\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\n\ninterface Props {\n  message: string | null;\n  onClose: () => void;\n}\n\nconst ErrorMessage: React.FC<Props> = ({ message, onClose }) => {\n  return (\n    <div\n      className={`notification is-danger is-light has-text-weight-normal ${\n        message ? '' : 'hidden'\n      }`}\n    >\n      <button\n        data-cy=\"HideErrorButton\"\n        type=\"button\"\n        className=\"delete\"\n        onClick={onClose}\n      />\n      {message}\n    </div>\n  );\n};\n\nexport default ErrorMessage;\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useContext } from 'react';\nimport { UserWarning } from './UserWarning';\nimport { TodoAllChecked } from './components/TodoAllChecked';\nimport { TodoList } from './components/TodoList';\nimport { TodoFooter } from './components/TodoFooter';\nimport { TodoContext } from './components/TodoContext';\nimport ErrorMessage from './components/ErrorMessage/ErrorMessage';\n\nexport const USER_ID = 12048;\n\nexport const App: React.FC = () => {\n  const { errorMessage, closeErrorMessage } = useContext(TodoContext);\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <header className=\"todoapp__header\">\n          {/* this buttons is active only if there are some active todos */}\n          <TodoAllChecked />\n\n          {/* Add a todo on form submit */}\n          <form>\n            <input\n              data-cy=\"NewTodoField\"\n              type=\"text\"\n              className=\"todoapp__new-todo\"\n              placeholder=\"What needs to be done?\"\n            />\n          </form>\n        </header>\n\n        <section className=\"todoapp__main\" data-cy=\"TodoList\">\n          <TodoList />\n        </section>\n\n        {/* Hide the footer if there are no todos */}\n        {}\n        <TodoFooter />\n      </div>\n\n      {/* Notification is shown in case of any error */}\n      {/* Add the 'hidden' class to hide the message smoothly */}\n      <ErrorMessage message={errorMessage} onClose={closeErrorMessage} />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\nimport { TodoProvider } from './components/TodoContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoProvider>\n      <App />\n    </TodoProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}